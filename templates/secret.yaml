# vim: set filetype=helm:

{{- $fullname := include "postgresql-cluster.fullname" . -}}
{{- $clusterDomain := include "postgresql-cluster.clusterDomain" . -}}
{{- $serviceName := include "postgresql-cluster.postgres.serviceName" . -}}
{{- $serviceDomain := include "postgresql-cluster.postgres.serviceDomain" . -}}

{{- $generatedPostgresPassword := "" -}}
{{- $generatedReplicationPassword := "" -}}
{{- $generatedMonitorPassword := "" -}}
{{- $generatedPgpoolAdminPassword := "" -}}

{{- if .Values.postgresPassword.generatePassword }}
{{- $generatedPostgresPassword = randAlphaNum 20 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "postgresql-cluster.postgresPassword.secretName" . }}
  labels: 
    {{- include "postgresql-cluster.hookLabels" . | nindent 4 }}
  annotations:
    {{- include "postgresql-cluster.hookAnnotationsForPassword" . | nindent 4 }}
    helm.sh/resource-policy: keep
type: Opaque
stringData:
  password: {{ $generatedPostgresPassword }}
{{- end }}{{/* if .Values.postgresPassword.generatePassword */}}


{{- if .Values.replicationPassword.generatePassword }}
{{- $generatedReplicationPassword = randAlphaNum 20 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "postgresql-cluster.replicationPassword.secretName" . }}
  labels:
    {{- include "postgresql-cluster.hookLabels" . | nindent 4 }}
  annotations:
    {{- include "postgresql-cluster.hookAnnotationsForPassword" . | nindent 4 }}
    helm.sh/resource-policy: keep
type: Opaque
stringData:
  password: {{ $generatedReplicationPassword }}
{{- end }}{{/* if .Values.replicationPassword.generatePassword */}}


{{- if .Values.monitorPassword.generatePassword }}
{{- $generatedMonitorPassword = randAlphaNum 20 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "postgresql-cluster.monitorPassword.secretName" . }}
  labels:
    {{- include "postgresql-cluster.hookLabels" . | nindent 4 }}
  annotations:
    {{- include "postgresql-cluster.hookAnnotationsForPassword" . | nindent 4 }}
    helm.sh/resource-policy: keep
type: Opaque
stringData:
  password: {{ $generatedMonitorPassword }}
{{- end }}{{/* if .Values.monitorPassword.generatePassword */}}


{{- if .Values.pgpoolAdminPassword.generatePassword }}
{{- $generatedPgpoolAdminPassword = randAlphaNum 20 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "postgresql-cluster.pgpoolAdminPassword.secretName" . }}
  labels:
    {{- include "postgresql-cluster.hookLabels" . | nindent 4 }}
  annotations:
    {{- include "postgresql-cluster.hookAnnotationsForPassword" . | nindent 4 }}
    helm.sh/resource-policy: keep
type: Opaque
stringData:
  password: {{ $generatedPgpoolAdminPassword }}
{{- end }}{{/* if .Values.pgpoolAdminPassword.generatePassword */}}

{{/* Generate pgpass for psql Pod */}}
{{- define "postgresql-cluster.pgpassForPsql" -}}
{{ printf "%s-master-0.%s:5432:*:postgres:%s" $.fullname $.serviceDomain $.postgresPassword }}
{{ range $i := until (int $.replicas) }}
{{- printf "%s-standby-%d.%s:5432:*:postgres:%s" $.fullname $i $.serviceDomain $.postgresPassword }}
{{ end }}{{/* range $i */}}
{{ range $username, $password := $.userPasswords }}
{{- printf "%s-master-0.%s:5432:*:%s:%s" $.fullname $.serviceDomain $username $password }}
{{ range $i := until (int $.replicas) }}
{{- printf "%s-standby-%d.%s:5432:*:%s:%s" $.fullname $i $.serviceDomain $username $password }}
{{ end -}}{{/* range $i */}}
{{- printf "%s-pgpool.%s:5433:*:%s:%s" $.serviceName $.clusterDomain $username $password }}
{{ end }}{{/* range $.userPasswords */}}
{{- if $.pgpassExtData }}
{{ printf "\n## EXTERNAL ##" }}
{{ $.pgpassExtData }}
{{- end }}{{/* if $.pgpassExtData */}}
{{- end }}{{/* define "postgresql-cluster.pgpassForPsql" */}}

{{/* Generate pgpass for postgres Pod */}}
{{- define "postgresql-cluster.pgpassForPostgres" -}}
{{ printf "%s-master-0.%s:5432:*:postgres:%s" $.fullname $.serviceDomain $.postgresPassword }}
{{ printf "%s-master-0.%s:5432:*:replicator:%s" $.fullname $.serviceDomain $.replicationPassword }}
{{- if $.pgpassExtData }}
{{ printf "\n## EXTERNAL ##" }}
{{ $.pgpassExtData }}
{{- end }}{{/* if $.pgpassExtData */}}
{{- end }}{{/* define "postgresql-cluster.pgpassForPostgres" */}}

{{- $pgpass := dict "fullname" $fullname }}
{{- $_ := set $pgpass "clusterDomain" $clusterDomain }}
{{- $_ := set $pgpass "serviceName" $serviceName }}
{{- $_ := set $pgpass "serviceDomain" $serviceDomain }}
{{- $_ := set $pgpass "replicas" .Values.postgres.replicas }}

{{- $postgresPasswordSecret := lookup "v1" "Secret" .Release.Namespace (include "postgresql-cluster.postgresPassword.secretName" .) }}
{{- $postgresPassword := "" }}
{{- if $postgresPasswordSecret }}
  {{- $postgresPassword = (get $postgresPasswordSecret "data").password | b64dec }}
{{- else if $generatedPostgresPassword }}
  {{- $postgresPassword = $generatedPostgresPassword }}
{{- end }}{{/* if $postgresPasswordSecret */}}
{{- $_ := set $pgpass "postgresPassword" $postgresPassword }}

{{- $replicationPasswordSecret := lookup "v1" "Secret" .Release.Namespace (include "postgresql-cluster.replicationPassword.secretName" .) }}
{{- $replicationPassword := "" }}
{{- if $replicationPasswordSecret }}
  {{- $replicationPassword = (get $replicationPasswordSecret "data").password | b64dec }}
{{- else if $generatedReplicationPassword }}
  {{- $replicationPassword = $generatedReplicationPassword }}
{{- end }}{{/* if $replicationPasswordSecret */}}
{{- $_ := set $pgpass "replicationPassword" $replicationPassword }}

{{- $userPasswordsSecret := lookup "v1" "Secret" .Release.Namespace .Values.userPasswords.secretName }}
{{- $userPasswords := dict }}
{{- if $userPasswordsSecret }}
  {{- range $username, $password := (get $userPasswordsSecret "data") }}
    {{- $_ := set $userPasswords $username ($password | b64dec) }}
  {{- end }}
{{- end }}{{/* if $userPasswordsSecret */}}
{{- $_ := set $pgpass "userPasswords" $userPasswords }}

{{- $pgpassExtData := "" }}
{{- if .Values.postgres.pgpassExt }}
{{- $pgpassExtSecret := lookup "v1" "Secret" .Release.Namespace .Values.postgres.pgpassExt.secretName }}
{{- if $pgpassExtSecret }}
  {{- $pgpassExtData = (dig "data" "pgpass" "" $pgpassExtSecret) | b64dec }}
{{- end }}{{/* if $pgpassExtSecret */}}
{{- end }}{{/* if .Values.postgres.pgpassExt */}}
{{- $_ := set $pgpass "pgpassExtData" $pgpassExtData }}


{{- if .Values.psql.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $fullname }}-pgpass-for-psql
  labels:
    {{- include "postgresql-cluster.labels" . | nindent 4 }}
data:
  pgpass: {{ (include "postgresql-cluster.pgpassForPsql" $pgpass) | b64enc }}
{{- end }}{{/* if .Values.psql.enabled */}}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $fullname }}-pgpass-for-postgres
  labels:
    {{- include "postgresql-cluster.labels" . | nindent 4 }}
data:
  pgpass: {{ (include "postgresql-cluster.pgpassForPostgres" $pgpass) | b64enc }}

