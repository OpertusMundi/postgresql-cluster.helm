# vim: set filetype=helm: 

{{- $commandArgs := list "postgres" "-c" "config_file=$(CONFIG_FILE)" -}}
{{- $readinessProbeCommand := list "su-exec" "postgres" "pg_isready" "-h" "localhost" -}}
{{- $masterHost := printf "%s-master-0.%s" .Release.Name (include "postgresql-cluster.postgres.serviceName" .) -}}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-master
  labels:
    {{- include "postgresql-cluster.labels" . | nindent 4 }}
spec:
  replicas: 1
  serviceName: {{ include "postgresql-cluster.postgres.serviceName" . }}
  selector:
    matchLabels:
      {{- include "postgresql-cluster.selectorLabelsForMaster" . | nindent 6 }}
  {{- with .Values.postgres.volumeClaims }}
  volumeClaimTemplates:
  # PVC for data directory
  - metadata:
      name: data
    spec:
      accessModes: 
      - ReadWriteOnce
      storageClassName: {{ .dataDir.storageClassName }}
      resources:
        requests:
          storage: {{ .dataDir.size }}
      selector:
        matchLabels:
          {{- toYaml .dataDir.matchLabels | nindent 10 }}
  # PVC for archive directory
  - metadata:
      name: archive
    spec:
      accessModes: 
      - ReadWriteMany
      storageClassName: {{ .archiveDir.storageClassName }}
      resources:
        requests:
          storage: {{ .archiveDir.size }}
      selector:
        matchLabels:
          {{- toYaml .archiveDir.matchLabels | nindent 10 }}
  {{- end }}
  # Pod template
  template:
    metadata:
      annotations:
        {{- toYaml .Values.podAnnotations | nindent 8 }}
      labels:
        {{- include "postgresql-cluster.selectorLabelsForMaster" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "postgresql-cluster.serviceAccountName" . }}
      securityContext:
        fsGroup: {{ .Values.postgres.securityContext.gid }}
      volumes:
      - name: postgres-password
        secret:
          secretName: {{ include "postgresql-cluster.postgresPassword.secretName" . }}
          defaultMode: 0640
      - name: monitor-password
        secret:
          secretName: {{ include "postgresql-cluster.monitorPassword.secretName" . }}
          defaultMode: 0640
      - name: replication-password
        secret:
          secretName: {{ include "postgresql-cluster.replicationPassword.secretName" . }}
          defaultMode: 0640
      - name: user-passwords
        secret:
          secretName: {{ include "postgresql-cluster.userPasswords.secretName" . }}
          defaultMode: 0640
      - name: tls
        secret:
          secretName: {{ include "postgresql-cluster.tls.secretName" . }} 
          defaultMode: 0640
      - name: config
        configMap:
          name: {{ .Release.Name }}-config
      - name: db-init-scripts
        configMap:
          name: {{ .Release.Name }}-db-init-scripts
          defaultMode: 0774
      containers:
      - name: postgres
        image: "{{ .Values.postgres.image }}"
        imagePullPolicy: IfNotPresent
        args: {{- toYaml $commandArgs | nindent 10 }}
        env:
        - name: CONFIG_FILE
          value: /etc/postgresql/postgresql.conf
        - name: POSTGRES_PASSWORD_FILE
          value: /secrets/postgres-password/password
        - name: REPLICATION_USER
          value: replicator
        - name: REPLICATION_PASSWORD_FILE
          value: /secrets/replication-password/password
        - name: MONITOR_USER
          value: monitor
        - name: MONITOR_PASSWORD_FILE
          value: /secrets/monitor-password/password
        - name: USER_PASSWORDS_DIR
          value: /secrets/users
        - name: ARCHIVE_DIR
          value: /var/backups/postgresql/archive
        - name: TLS_KEY_FILE
          value: /certs/tls.key
        - name: TLS_CERT_FILE
          value: /certs/tls.crt
        volumeMounts: 
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: archive
          mountPath: /var/backups/postgresql/archive
        - name: postgres-password
          mountPath: /secrets/postgres-password
          readOnly: true
        - name: replication-password
          mountPath: /secrets/replication-password
          readOnly: true
        - name: monitor-password
          mountPath: /secrets/monitor-password
          readOnly: true
        - name: user-passwords
          mountPath: /secrets/users
          readOnly: true
        - name: tls
          mountPath: /certs
          readOnly: true
        - name: config
          mountPath: /etc/postgresql
          readOnly: true
        - name: db-init-scripts
          mountPath: /docker-entrypoint-initdb.d 
          readOnly: true
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe: null
        readinessProbe:
          exec:
            command: {{- toYaml $readinessProbeCommand | nindent 14 }} 
          initialDelaySeconds: 3
        terminationMessagePolicy: FallbackToLogsOnError 
        resources:
          {{- toYaml .Values.postgres.resources | nindent 10 }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}


---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-standby
  labels:
    {{- include "postgresql-cluster.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.postgres.replicas }}
  serviceName: {{ include "postgresql-cluster.postgres.serviceName" . }}
  selector:
    matchLabels:
      {{- include "postgresql-cluster.selectorLabelsForStandby" . | nindent 6 }}
  {{- with .Values.postgres.volumeClaims }}
  volumeClaimTemplates:
  # PVC for data directory
  - metadata:
      name: data
    spec:
      accessModes: 
      - ReadWriteOnce
      storageClassName: {{ .dataDir.storageClassName }}
      resources:
        requests:
          storage: {{ .dataDir.size }}
      selector:
        matchLabels:
          {{- toYaml .dataDir.matchLabels | nindent 10 }}
  {{- end }}
  # Pod template
  template:
    metadata:
      annotations:
        {{- toYaml .Values.podAnnotations | nindent 8 }}
      labels:
        {{- include "postgresql-cluster.selectorLabelsForStandby" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "postgresql-cluster.serviceAccountName" . }}
      securityContext:
        fsGroup: {{ .Values.postgres.securityContext.gid }}
      volumes:
      - name: archive-master
        persistentVolumeClaim:
          claimName: {{ printf "archive-%s-master-0" .Release.Name }}
      - name: postgres-password
        secret:
          secretName: {{ include "postgresql-cluster.postgresPassword.secretName" . }}
          defaultMode: 0640
      - name: replication-password
        secret:
          secretName: {{ include "postgresql-cluster.replicationPassword.secretName" . }}
          defaultMode: 0640
      - name: tls
        secret:
          secretName: {{ include "postgresql-cluster.tls.secretName" . }} 
          defaultMode: 0640
      - name: config
        configMap:
          name: {{ .Release.Name }}-config
      - name: scripts
        configMap:
          name: {{ .Release.Name }}-scripts
          defaultMode: 0774
          items:
          - key: wait-for-host.sh
            path: wait-for-host.sh
          - key: basebackup.sh
            path: basebackup.sh
      initContainers:
      - name: wait-for-master
        image: busybox:1
        imagePullPolicy: IfNotPresent
        command:
        - /opt/wait-for-host.sh
        - --timeout 
        - '30'
        - {{ $masterHost }}
        volumeMounts:
        - name: scripts
          mountPath: /opt/
          readOnly: true
      - name: basebackup
        image: "{{ .Values.postgres.image }}"
        imagePullPolicy: IfNotPresent
        command: 
        - su-exec
        - postgres
        - /opt/basebackup.sh
        - --user
        - replicator
        - --password-file
        - /secrets/replication-password/password
        - --archive-dir
        - /var/backups/postgresql/archive-master
        - {{ $masterHost }}
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: replication-password
          mountPath: /secrets/replication-password
          readOnly: true
        - name: scripts
          mountPath: /opt/
          readOnly: true
      containers: 
      - name: postgres
        image: "{{ .Values.postgres.image }}"
        imagePullPolicy: IfNotPresent
        args: {{- toYaml $commandArgs | nindent 10 }}
        env:
        - name: CONFIG_FILE
          value: /etc/postgresql/postgresql.conf
        - name: POSTGRES_PASSWORD_FILE
          value: /secrets/postgres-password/password
        - name: ARCHIVE_FROM_DIR
          value: /var/backups/postgresql/archive-master
        - name: TLS_KEY_FILE
          value: /certs/tls.key
        - name: TLS_CERT_FILE
          value: /certs/tls.crt
        volumeMounts: 
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: archive-master
          mountPath: /var/backups/postgresql/archive-master
          readOnly: true
        - name: postgres-password
          mountPath: /secrets/postgres-password
          readOnly: true
        - name: tls
          mountPath: /certs
          readOnly: true
        - name: config
          mountPath: /etc/postgresql
          readOnly: true
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe: null
        readinessProbe:
          exec:
            command: {{- toYaml $readinessProbeCommand | nindent 14 }} 
          initialDelaySeconds: 3
        terminationMessagePolicy: FallbackToLogsOnError 
        resources:
          {{- toYaml .Values.postgres.resources | nindent 10 }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
