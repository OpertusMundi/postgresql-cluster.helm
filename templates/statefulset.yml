# vim: set filetype=helm: 

{{- $command := list "postgres" "-c" "config_file=$(CONFIG_FILE)" -}}
{{/* https://stackoverflow.com/a/66548354/1943126 */}}
{{- $command = append $command (printf "--wal_level=%s" .Values.postgres.walLevel) }}
{{- if .Values.postgres.maxNumConnections }}
{{- $command = append $command (printf "--max_connections=%d" (int .Values.postgres.maxNumConnections)) -}}
{{- end }}{{/* if .maxNumConnections */}}
{{- if .Values.postgres.sharedBuffersSize }}
{{- $command = append $command (printf "--shared_buffers=%s" .Values.postgres.sharedBuffersSize) }}
{{- end }}{{/* if .sharedBuffersSize */}}
{{- if .Values.postgres.workMemory }}
{{- $command = append $command (printf "--work_mem=%s" .Values.postgres.workMemory) -}}
{{- end }}{{/* if .workMemory */}}
{{- if .Values.postgres.logging.collectorEnabled }}
{{- $command = append $command (printf "--logging_collector=on") -}}
{{- end }}{{/* if .logging.collectorEnabled */}}

{{- $fullname := (include "postgresql-cluster.fullname" .) -}}
{{- $serviceName := (include "postgresql-cluster.postgres.serviceName" .) -}}
{{- $serviceDomain := (include "postgresql-cluster.postgres.serviceDomain" .) -}}
{{- $masterHost := printf "%s-master-0.%s" $fullname $serviceDomain -}}

{{- $configMap := (include (print $.Template.BasePath "/configmaps/config.yml") . | fromYaml) -}}

{{- $readinessProbeCommand := list "su-exec" "postgres" "pg_isready" "-h" "localhost" -}}

{{- define "postgresql-cluster.postgres.pvcTemplateForMasterData" -}}
{{- with .Values.postgres.pv.dataDir }}
metadata:
  name: data
spec:
  accessModes: 
  - ReadWriteOnce
  storageClassName: {{ .storageClassName }}
  resources:
    requests:
      storage: {{ .size }}
  {{- if .useSelector }}
  selector:
    matchLabels:
      {{- include "postgresql-cluster.selectorLabelsForMasterData" $ | nindent 10 }}  
      {{- if .extraMatchLabels }}{{ toYaml .extraMatchLabels | nindent 10 }}{{- end }}
  {{- end }}{{/* if .useSelector */}}
{{- end }}{{/* with .Values.postgres.pv.dataDir */}}
{{- end }}

{{- define "postgresql-cluster.postgres.pvcTemplateForStandbyData" -}}
{{- with .Values.postgres.pv.dataDir }}
metadata:
  name: data
spec:
  accessModes: 
  - ReadWriteOnce
  storageClassName: {{ .storageClassName }}
  resources:
    requests:
      storage: {{ .size }}
  {{- if .useSelector }}
  selector:
    matchLabels:
      {{- include "postgresql-cluster.selectorLabelsForStandbyData" $ | nindent 10 }}  
      {{- if .extraMatchLabels }}{{ toYaml .extraMatchLabels | nindent 10 }}{{- end }}
  {{- end }}{{/* if .useSelector */}}
{{- end }}{{/* with .Values.postgres.pv.dataDir */}}
{{- end }}

{{- define "postgresql-cluster.postgres.pvcTemplateForLogs" -}}
{{- with .Values.postgres.pv.logsDir }}
metadata:
  name: logs
spec:
  accessModes: 
  - ReadWriteOnce
  storageClassName: {{ .storageClassName }}
  resources:
    requests:
      storage: {{ .size }}
  {{- if .useSelector }}
  selector:
    matchLabels:
      {{- if .extraMatchLabels }}{{ toYaml .extraMatchLabels | nindent 10 }}{{- end }}
  {{- end }}{{/* if .useSelector */}}
{{- end }}{{/* with .Values.postgres.pv.logsDir */}}
{{- end }}

{{- define "postgresql-cluster.postgres.containerForLogs" -}}
name: tail
image: busybox:1
securityContext:
  runAsUser: {{ .Values.postgres.securityContext.uid }}
stdin: true
workingDir: /tmp
command:
- sh
- -eu
- -c
- |-
  cp /var/lib/postgresql/data/current_logfiles .
  logfile=$(awk '/^stderr\s/{print $2}' current_logfiles)
  tail -v -n +1 -F ${logfile}
livenessProbe:
  exec:
    command:
    - diff
    - -q
    - /tmp/current_logfiles
    - /var/lib/postgresql/data/current_logfiles
  initialDelaySeconds: 18
  periodSeconds: 6
resources:
  limits:
    memory: 128Mi
  requests:
    memory: 32Mi
volumeMounts:
- name: data
  mountPath: /var/lib/postgresql/data
  subPath: {{ .Values.postgres.pv.dataDir.subPath }}
  readOnly: true
{{- if .Values.postgres.pv.logsDir }}
- name: logs
  mountPath: /var/lib/postgresql/logs
  readOnly: true
{{- end }}{{/* if .Values.postgres.pv.logsDir */}}
{{- end }}

{{- define "postgresql-cluster.postgres.containerForPreparingPgpass" -}}
name: prepare-pgpass
image: busybox:1 
imagePullPolicy: IfNotPresent
securityContext:
  runAsUser: {{ .Values.postgres.securityContext.uid }}
workingDir: /var/lib/postgresql/pgpass/
command:
- sh
- -ue
- -c 
- |-
  cp -v /secrets/pgpass .pgpass && chmod -v 0600 .pgpass
volumeMounts:
- name: pgpass
  mountPath: /secrets/pgpass
  subPath: pgpass
  readOnly: true
- name: pgpass-for-postgres
  mountPath: /var/lib/postgresql/pgpass
{{- end }}

#
# manifests
#
---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullname }}-master
  labels:
    {{- include "postgresql-cluster.labelsForMaster" . | nindent 4 }}
spec:
  replicas: 1
  serviceName: {{ $serviceName }}
  selector:
    matchLabels:
      {{- include "postgresql-cluster.selectorLabelsForMaster" . | nindent 6 }}
  volumeClaimTemplates:
  - {{- include "postgresql-cluster.postgres.pvcTemplateForMasterData" . | indent 4 }}  
  {{- if .Values.postgres.pv.logsDir }}
  - {{- include "postgresql-cluster.postgres.pvcTemplateForLogs" . | indent 4 }}
  {{- end }}
  # Pod template
  template:
    metadata:
      annotations:
        checksum/config: {{ cat (get $configMap.data "postgresql.conf") "\n\n" (get $configMap.data "pg_hba.conf") "\n\n" (get $configMap.data "replication-for-master.conf") | sha256sum }}
        {{- if .Values.podAnnotations }}{{ toYaml .Values.podAnnotations | nindent 8 }}{{- end }}
        {{- if .Values.postgres.podAnnotations }}{{ toYaml .Values.postgres.podAnnotations | nindent 8 }}{{- end }}
      labels:
        {{- include "postgresql-cluster.selectorLabelsForMaster" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "postgresql-cluster.serviceAccountName" . }}
      securityContext:
        fsGroup: {{ .Values.postgres.securityContext.gid }}
      volumes:
      - name: archive
        persistentVolumeClaim:
          claimName: {{ include "postgresql-cluster.postgres.archivePvcName" . }}
      - name: postgres-password
        secret:
          secretName: {{ include "postgresql-cluster.postgresPassword.secretName" . }}
          defaultMode: 0640
      - name: monitor-password
        secret:
          secretName: {{ include "postgresql-cluster.monitorPassword.secretName" . }}
          defaultMode: 0640
      - name: replication-password
        secret:
          secretName: {{ include "postgresql-cluster.replicationPassword.secretName" . }}
          defaultMode: 0640
      - name: user-passwords
        secret:
          secretName: {{ include "postgresql-cluster.userPasswords.secretName" . }}
          defaultMode: 0640
      - name: tls
        secret:
          secretName: {{ include "postgresql-cluster.tls.secretName" . }} 
          defaultMode: 0640
      - name: config
        configMap:
          name: {{ $fullname }}-config-generated
      {{- if .Values.postgres.configurationFrom }}
      - name: config-extra
        configMap:
          name: {{ .Values.postgres.configurationFrom.configMapKeyRef.name }}
      {{- end }}
      - name: db-init-scripts
        configMap:
          name: {{ $fullname }}-db-init-scripts
          defaultMode: 0774
      - name: pgpass
        secret:
          secretName: {{ $fullname }}-pgpass-for-postgres
          defaultMode: 0640
      - name: pgpass-for-postgres
        emptyDir: {}
      initContainers:
      - {{ include "postgresql-cluster.postgres.containerForPreparingPgpass" . | nindent 8 }}
      containers:
      - 
        name: postgres
        image: {{ .Values.postgres.image | squote }}
        imagePullPolicy: IfNotPresent
        args: {{- toYaml $command | nindent 10 }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: "metadata.name"
        - name: POSTGRES_INITDB_ARGS
          value: >-
            --data-checksums
        - name: CONFIG_FILE
          value: /etc/postgresql/postgresql.conf
        - name: POSTGRES_PASSWORD_FILE
          value: /secrets/postgres-password/password
        - name: REPLICATION_USER
          value: replicator
        - name: REPLICATION_PASSWORD_FILE
          value: /secrets/replication-password/password
        - name: MONITOR_USER
          value: monitor
        - name: MONITOR_PASSWORD_FILE
          value: /secrets/monitor-password/password
        - name: USER_PASSWORDS_DIR
          value: /secrets/users
        - name: ARCHIVE_DIR
          value: /var/backups/postgresql/archive
        - name: TLS_KEY_FILE
          value: /certs/tls.key
        - name: TLS_CERT_FILE
          value: /certs/tls.crt
        - name: PGPASSFILE
          value: /var/lib/postgresql/pgpass/.pgpass
        volumeMounts: 
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: {{ .Values.postgres.pv.dataDir.subPath }}
        - name: archive
          mountPath: /var/backups/postgresql/archive
          subPathExpr: $(POD_NAME)
        {{- if .Values.postgres.pv.logsDir }}
        - name: logs
          mountPath: /var/lib/postgresql/logs
        {{- end }}{{/* if .Values.postgres.pv.logsDir */}}
        - name: postgres-password
          mountPath: /secrets/postgres-password
          readOnly: true
        - name: replication-password
          mountPath: /secrets/replication-password
          readOnly: true
        - name: monitor-password
          mountPath: /secrets/monitor-password
          readOnly: true
        - name: user-passwords
          mountPath: /secrets/users
          readOnly: true
        - name: tls
          mountPath: /certs
          readOnly: true
        - name: config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
        - name: config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
          readOnly: true
        - name: pgpass-for-postgres
          mountPath: /var/lib/postgresql/pgpass
          readOnly: true
        - name: config
          mountPath: /etc/postgresql/conf.d/01-replication.conf
          subPath: replication-for-master.conf
          readOnly: true
        {{- if .Values.postgres.configurationFrom }}
        {{- range $i, $key := .Values.postgres.configurationFrom.configMapKeyRef.key }}
        {{- if (hasSuffix ".conf" $key) }}
        - name: config-extra
          mountPath: {{ printf "/etc/postgresql/conf.d/99-x%d-%s" $i $key }}
          subPath: {{ $key }}
          readOnly: true
        {{- end }}{{/* if (hasSuffix ".conf" $key) */}}
        {{- end }}{{/* range */}}
        {{- end }}{{/* if .Values.postgres.configurationFrom */}}
        - name: db-init-scripts
          mountPath: /docker-entrypoint-initdb.d 
          readOnly: true
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe: null
        readinessProbe:
          exec:
            command: {{- toYaml $readinessProbeCommand | nindent 14 }} 
          initialDelaySeconds: {{ .Values.postgres.readinessProbe.initialDelaySeconds | default 3 }}
          periodSeconds: {{ .Values.postgres.readinessProbe.periodSeconds | default 20 }}
        terminationMessagePolicy: FallbackToLogsOnError 
        resources:
          {{- toYaml .Values.postgres.resources | nindent 10 }}
      {{- if and .Values.postgres.logging.collectorEnabled .Values.postgres.logging.tailLogs }}
      - {{ include "postgresql-cluster.postgres.containerForLogs" . | nindent 8 }}
      {{- end }}
      affinity:
        {{- toYaml (.Values.postgres.master.affinity | default .Values.affinity) | nindent 8 }}


---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullname }}-standby
  labels:
    {{- include "postgresql-cluster.labelsForStandby" . | nindent 4 }}
spec:
  replicas: {{ .Values.postgres.replicas }}
  serviceName: {{ $serviceName }}
  selector:
    matchLabels:
      {{- include "postgresql-cluster.selectorLabelsForStandby" . | nindent 6 }}
  volumeClaimTemplates:
  - {{- include "postgresql-cluster.postgres.pvcTemplateForStandbyData" . | indent 4 }}  
  {{- if .Values.postgres.pv.logsDir }}
  - {{- include "postgresql-cluster.postgres.pvcTemplateForLogs" . | indent 4 }}
  {{- end }}
  # Pod template
  template:
    metadata:
      annotations:
        checksum/config: {{ cat (get $configMap.data "postgresql.conf") "\n\n" (get $configMap.data "pg_hba.conf") "\n\n" (get $configMap.data "replication-for-standby.conf") | sha256sum }}
        {{- if .Values.podAnnotations }}{{ toYaml .Values.podAnnotations | nindent 8 }}{{- end }}
        {{- if .Values.postgres.podAnnotations }}{{ toYaml .Values.postgres.podAnnotations | nindent 8 }}{{- end }}
      labels:
        {{- include "postgresql-cluster.selectorLabelsForStandby" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "postgresql-cluster.serviceAccountName" . }}
      securityContext:
        fsGroup: {{ .Values.postgres.securityContext.gid }}
      volumes:
      - name: archive
        persistentVolumeClaim:
          claimName: {{ include "postgresql-cluster.postgres.archivePvcName" . }}
      - name: postgres-password
        secret:
          secretName: {{ include "postgresql-cluster.postgresPassword.secretName" . }}
          defaultMode: 0640
      - name: replication-password
        secret:
          secretName: {{ include "postgresql-cluster.replicationPassword.secretName" . }}
          defaultMode: 0640
      - name: tls
        secret:
          secretName: {{ include "postgresql-cluster.tls.secretName" . }} 
          defaultMode: 0640
      - name: config
        configMap:
          name: {{ $fullname }}-config-generated
      {{- if .Values.postgres.configurationFrom }}
      - name: config-extra
        configMap:
          name: {{ .Values.postgres.configurationFrom.configMapKeyRef.name }}
      {{- end }}
      - name: scripts
        configMap:
          name: {{ $fullname }}-scripts
          defaultMode: 0774
      - name: pgpass
        secret:
          secretName: {{ $fullname }}-pgpass-for-postgres
          defaultMode: 0600
      - name: pgpass-for-postgres
        emptyDir: {}
      initContainers:
      - {{ include "postgresql-cluster.postgres.containerForPreparingPgpass" . | nindent 8 }}
      - 
        name: wait-for-master
        image: busybox:1
        imagePullPolicy: IfNotPresent
        command:
        - /opt/wait-for-host.sh
        - --timeout=30
        - {{ $masterHost }}
        volumeMounts:
        - name: scripts
          mountPath: /opt/
          readOnly: true
      {{- if .Values.postgres.standby.prepareData }}
      - 
        name: prepare-data
        image: {{ .Values.postgres.image | squote }}
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: {{ .Values.postgres.securityContext.uid }}
        env:
        - name: PGPASSFILE
          value: /var/lib/postgresql/pgpass/.pgpass
        - name: REPLICATION_USER
          value: replicator
        - name: MASTER_HOST
          value: {{ $masterHost }}
        - name: REWIND_DATA
          value: {{ .Values.postgres.standby.rewind | squote }}
        command: 
        - /opt/prepare-data-for-standby.sh
        volumeMounts:
        - name: pgpass-for-postgres
          mountPath: /var/lib/postgresql/pgpass
          readOnly: true
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: {{ .Values.postgres.pv.dataDir.subPath }}
        - name: scripts
          mountPath: /opt/
          readOnly: true
      {{- end }}{{/* if .Values.postgres.standby.prepareData */}}
      - 
        name: generate-name
        image:  {{ .Values.postgres.image | squote }}
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: {{ .Values.postgres.securityContext.uid }}
        {{/*- see https://www.postgresql.org/docs/current/runtime-config-replication.html#GUC-SYNCHRONOUS-STANDBY-NAMES -*/}}
        command:
        - bash
        - -ue
        - -c
        - |-
          printf "cluster_name = '%s'\n" ${HOSTNAME//-/_} | tee ${PGDATA}/01-cluster-name.conf
        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: {{ .Values.postgres.pv.dataDir.subPath }}
      containers: 
      - 
        name: postgres
        image: {{ .Values.postgres.image | squote }}
        imagePullPolicy: IfNotPresent
        args: {{- toYaml $command | nindent 10 }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: "metadata.name"
        - name: CONFIG_FILE
          value: /etc/postgresql/postgresql.conf
        - name: POSTGRES_PASSWORD_FILE
          value: /secrets/postgres-password/password
        - name: ARCHIVE_DIR
          value: /var/backups/postgresql/archive
        - name: ARCHIVE_MASTER_DIR
          value: /var/backups/postgresql/archive-master
        - name: TLS_KEY_FILE
          value: /certs/tls.key
        - name: TLS_CERT_FILE
          value: /certs/tls.crt
        - name: PGPASSFILE
          value: /var/lib/postgresql/pgpass/.pgpass
        volumeMounts: 
        - name: data
          mountPath: /var/lib/postgresql/data
          subPath: {{ .Values.postgres.pv.dataDir.subPath }}
        - name: archive
          mountPath: /var/backups/postgresql/archive-master
          subPathExpr: {{ printf "%s-master-0" $fullname }}
          readOnly: true
        - name: archive
          mountPath: /var/backups/postgresql/archive
          subPathExpr: $(POD_NAME)
        {{- if .Values.postgres.pv.logsDir }}
        - name: logs
          mountPath: /var/lib/postgresql/logs
        {{- end }}{{/* if .Values.postgres.pv.logsDir */}}
        - name: postgres-password
          mountPath: /secrets/postgres-password
          readOnly: true
        - name: tls
          mountPath: /certs
          readOnly: true
        - name: config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
          readOnly: true
        - name: config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
          readOnly: true
        - name: pgpass-for-postgres
          mountPath: /var/lib/postgresql/pgpass 
        - name: config
          mountPath: /etc/postgresql/conf.d/01-replication.conf
          subPath: replication-for-standby.conf
          readOnly: true
        {{- if .Values.postgres.configurationFrom }}
        {{- range $i, $key := .Values.postgres.configurationFrom.configMapKeyRef.key }}
        {{- if (hasSuffix ".conf" $key) }}
        - name: config-extra
          mountPath: {{ printf "/etc/postgresql/conf.d/99-x%d-%s" $i $key }}
          subPath: {{ $key }}
          readOnly: true
        {{- end }}{{/* if (hasSuffix ".conf" $key) */}}
        {{- end }}{{/* range */}}
        {{- end }}{{/* if .Values.postgres.configurationFrom */}}
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe: null
        readinessProbe:
          exec:
            command: {{- toYaml $readinessProbeCommand | nindent 14 }} 
          initialDelaySeconds: {{ .Values.postgres.readinessProbe.initialDelaySeconds | default 3 }}
          periodSeconds: {{ .Values.postgres.readinessProbe.periodSeconds | default 20 }}
        terminationMessagePolicy: FallbackToLogsOnError 
        resources:
          {{- toYaml .Values.postgres.resources | nindent 10 }}
      {{- if and .Values.postgres.logging.collectorEnabled .Values.postgres.logging.tailLogs }}
      - {{ include "postgresql-cluster.postgres.containerForLogs" . | nindent 8 }}
      {{- end }}
      affinity:
        {{- toYaml (.Values.postgres.standby.affinity | default .Values.affinity) | nindent 8 }}
