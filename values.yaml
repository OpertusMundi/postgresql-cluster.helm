
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# A map of annotations to apply to all Pods
podAnnotations: {}

# The secret holding the password of `postgres` user (the administrator)
postgresPassword:
  secretName:
  generatePassword: false

# The secret holding the password of the replication-charged user (named as `replicator`)
replicationPassword:
  secretName:
  generatePassword: false

# The secret holding the password of a monitoring-charged user (named as `monitor`, member of `pg_monitor` group)
monitorPassword:
  secretName:
  generatePassword: false

# The secret holding the password of `pgpool` user (the administrator) for PgPool 
pgpoolAdminPassword:
  secretName:
  generatePassword: false

# The secret holding a list of items of user credentials (used by PgPool to authenticate clients).
# Each item is named with the username and contains the password.
userPasswords:
  secretName:

# The secret holding the TLS key/certificate for PostgreSQL/PgPool servers
tls:
  secretName:
  # if not empty, request the TLS certificate from the given issuer (on pre-{install,upgrade} phase)
  issuerName:
  certificate:
    # number of days to make a TLS certificate valid for (meaningful only if issuer is given)
    numDays: 730  

postgres:
  image: 'postgres:15.2-alpine'
  #image: 'postgis/postgis:15-3.3-alpine'
  podAnnotations: {}
  # The name of the headless service governing the network id of stateful sets
  serviceName:
  securityContext:
    # The id of the user/group running postgres
    # (it depends on the image used, e.g. is different in alpine/ubuntu variants) 
    uid: 70
    gid: 70 
  volumeClaims:
    dataDir:
      size: 256Mi
      # define the storage class for data directories
      # note:  the corresponding PVC will require ReadWriteOnce access mode for the PV
      storageClassName: local-1
      # should we define a selector on the PVC? 
      # if not, binding only works by specifying a claimRef on the PV (or will dynamic provisioning)
      useSelector: true
      extraMatchLabels:
        {}
    archiveDir: 
      size: 256Mi
      # define the storage class for archive directory
      # note: the corresponding PVC will require ReadWriteMany access mode for the PV
      storageClassName: nfs-1
      useSelector: true
      extraMatchLabels: 
        {}
  # (max_connections) https://www.postgresql.org/docs/10/runtime-config-connection.html#RUNTIME-CONFIG-CONNECTION-SETTINGS
  maxNumConnections: 135
  # (shared_buffers)  https://www.postgresql.org/docs/10/runtime-config-resource.html 
  sharedBuffersSize: '128MB'
  # (work_mem)  https://www.postgresql.org/docs/10/runtime-config-resource.html 
  workMemory: '6MB'
  # Add extra configuration files (under /etc/postgresql/conf.d) from a configMap
  #configurationFrom:
    #configMapKeyRef: 
    #  name: postgres-1-config-extra
    #  key: ['shared-preload-libraries.conf']
  # Limit resources for each server (master or standby)
  resources:
    limits:
       cpu: 2.0
       memory: 1024Mi
    requests:
       cpu: 1.0
       memory: 256Mi
  readinessProbe:
    periodSeconds: 20
    initialDelaySeconds: 3
  # The number (>= 0) of standby servers to start
  replicas: 2
  # The number of synchronous standbys (<= .replicas). If zero, all standbys will be asynchronous.
  # see also: https://www.postgresql.org/docs/10/runtime-config-replication.html#GUC-SYNCHRONOUS-STANDBY-NAMES
  replicasToSync: 0
  standby:
    prepareData: true

pgpool:
  enabled: true
  image: 'ghcr.io/opertusmundi/pgpool:4-alpine'
  imagePullPolicy: IfNotPresent
  imagePullSecrets:
    []
  podAnnotations: {}
  securityContext:
    # The id of the user/group running pgpool (user "postgres")
    uid: 70
    gid: 70 
  serviceName: ~
  # numProcs is the number of children processes to spawn (see num_init_children of PgPool configuration)
  # see https://www.pgpool.net/docs/latest/en/html/runtime-config-connection.html#GUC-NUM-INIT-CHILDREN
  # NOTE: numProcs is also the maximum number of concurrent client connections! (as each connecting client is assigned 
  # to a single (available) child process)
  numProcs: 32
  # poolSize is the size of per-child connection pool (see max_pool of PgPool configuration)
  # see https://www.pgpool.net/mediawiki/index.php/Relationship_between_max_pool,_num_init_children,_and_max_connections
  # NOTE: poolSize * numProcs <= maxNumConnections - (numOfReservedConnections = 4)
  poolSize: 4
  #childLifeTime: '5min'
  #clientIdleLimit: '0'
  # How should PgPool load-balance readonly queries? 
  #  * (null): Do not load balance (use only master)
  #  * all: Load balance to all members of the cluster (some queries may return inconsistent results 
  #      due to replication lag)
  #  * sync: Load balance to master and synchronous standbys (this is only meaningful for synchronous replication,
  #      i.e. when postgres.replicasToSync > 0)
  loadBalance: 'all'
  # Limit resources
  resources:
    limits:
      cpu: 1.0
      memory: 128Mi
    requests:
      cpu: 0.5
      memory: 128Mi
  readinessProbe:
    enabled: true
    periodSeconds: 30
    initialDelaySeconds: 3
  # the number (>= 0) of PgPool servers to start
  replicas: 1

psql:
  enabled: true

